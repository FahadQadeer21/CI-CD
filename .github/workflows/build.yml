name: Build APK and Notify Slack

on:
  push:
    branches:
      - '*' # Adjust to your main branch name

jobs:
  build:
    name: Build APK on macOS
    runs-on: macos-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22' # Use the version compatible with your project

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Install Android dependencies
      # Install Android SDK
      - name: Install Android SDK
        run: |
          # Download and install the Android SDK tools
          curl -o android-sdk.zip https://dl.google.com/android/repository/commandlinetools-mac-8512546_latest.zip
          unzip android-sdk.zip -d $HOME/android-sdk
          rm android-sdk.zip
          export ANDROID_HOME=$HOME/android-sdk
          export PATH=$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH
      
          # Accept licenses and install necessary packages
          yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          $ANDROID_HOME/tools/bin/sdkmanager "platform-tools" "build-tools;31.0.0" "platforms;android-31"


      # Build APK
      - name: Build APK
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cd android
          ./gradlew assembleRelease -Pandroid.injected.signing.store.password=$STORE_PASSWORD -Pandroid.injected.signing.key.alias=$KEY_ALIAS -Pandroid.injected.signing.key.password=$KEY_PASSWORD

      # Upload APK as artifact
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk

      # Send Slack Notification
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          APK_URL=$(gh run list --json artifacts --jq '.[] | .artifacts[] | select(.name=="app-release.apk") | .url')
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"The APK has been successfully built and uploaded.\",
            \"attachments\": [
              {
                \"title\": \"Download APK\",
                \"title_link\": \"$APK_URL\"
              }
            ]
          }" $SLACK_WEBHOOK_URL
